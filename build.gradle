plugins {
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

configurations {
    jaxb
}

// Convert definitions in /src/main/resources/*.xsd to Java objects
task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${rootDir}/src/main/resources/contract.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask", classpath: configurations.jaxb.asPath

            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir) {
                schema(dir: "${rootDir}/src/main/resources", includes: "*.xsd")
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web-services")
    implementation("org.springframework.ws:spring-ws-core")

    implementation("wsdl4j:wsdl4j")

    // For Java 11:
    implementation("org.glassfish.jaxb:jaxb-runtime")
    implementation(files(genJaxb.classesDir).builtBy(genJaxb))

    // jaxb("com.sun.xml.bind:jaxb-xjc:2.1.7")
    jaxb("org.glassfish.jaxb:jaxb-xjc")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

test {
    useJUnitPlatform()
}